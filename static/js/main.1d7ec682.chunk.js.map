{"version":3,"sources":["../../src/MapPicker.tsx","App.js","index.js"],"names":["MAP_VIEW_ID","Math","className","loaded","React","marker","currentLocation","onChange","lat","Google","window","map","document","center","defaultLocation","isValidLocation","lng","zoom","clickedLocation","event","position","draggable","handleChangeLocation","src","script","Promise","resolve","loadScript","componentStyle","Object","width","height","style","id","App","useState","setLat","setLng","type","value","disabled","apiKey","ReactDOM","render","getElementById"],"mappings":"gNA4BA,IAAMA,EAAc,mBAAqBC,oCAAzC,G,EAE4B,SAAC,GAAD,IAAC,EAAD,EAAC,SAAD,EAAC,kBAAD,EAAC,WAAD,EAAC,MAA0CC,EAA3C,EAA2CA,UAE7DC,EAASC,YAAf,GACIC,EAASD,WAAb,MAEA,aACI,KAAY,CACR,IAAIE,EAAkBD,UAAtB,cACAE,EAASD,EAAD,MAAwBA,EAAhCC,QAIR,aACI,IAnBiBC,EAAzB,EAmBcC,EAAUC,OAAhB,OAEMC,EAAM,IAAIF,OAAJ,IAAoBG,wBAApB,GACR,CACIC,QAvBSL,EAuBeM,EAAD,IAvBvC,EAuB6DA,EAArCC,IAtBbd,iBAAuBA,aAA9B,IAsBoBc,EAA8E,CAAEP,IAAF,EAAUQ,IAAK,IACrGC,KAAM,IAGVR,oCAA4C,YACxC,IAAIS,EAAkBC,EAAtB,OACId,EAAJ,QAQIA,0BAPAA,UAAiB,IAAII,OAAJ,OAAuB,CACpCW,SADoC,EAEpCT,IAFoC,EAGpCU,WAAW,IAEfZ,yBAA8BJ,EAA9BI,sBAKJa,OAIZlB,eAAgB,WACPD,EAAL,UAnER,SAAoBoB,EAApB,GACI,IAAMC,EAASZ,uBAAf,UAMA,OALAY,2BACAA,uBACAA,QACCZ,8CAEM,IAAIa,SAASC,YAChBF,SAAgB,WACZE,QA2DAC,CACI,gEADM,EAAVA,uBAKAxB,gBAPRC,IAYA,IAAMwB,EAAiBC,OAAA,OAAc,CAACC,MAAD,OAAgBC,OAAO,SAAUC,GAAtE,IAED,OACC,yBAAKC,GAAIjC,EAAagC,MAAOJ,EAAgB1B,UAAWA,KC1D7CgC,EArBH,WAAO,IAAD,EACMC,mBAAS,IADf,mBACT3B,EADS,KACJ4B,EADI,OAEMD,mBAAS,IAFf,mBAETnB,EAFS,KAEJqB,EAFI,KAShB,OACE,oCACF,4CAAwB,2BAAOC,KAAK,OAAOC,MAAO/B,EAAKgC,UAAQ,IAC/D,6CAAyB,2BAAOF,KAAK,OAAOC,MAAOvB,EAAKwB,UAAQ,IAChE,kBAAC,EAAD,CAAW1B,gBAAiB,CAACN,IAAKA,EAAKQ,IAAKA,GAC1CgB,MAAO,CAACD,OAAO,SACfxB,SAXF,SAA+BC,EAAKQ,GAClCoB,EAAO5B,GACP6B,EAAOrB,IAUPyB,OAAO,8CCdXC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,U","file":"static/js/main.1d7ec682.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\n\r\nfunction loadScript(src:string, id:string) {\r\n    const script = document.createElement('script');\r\n    script.setAttribute('async', '');\r\n    script.setAttribute('id', id);\r\n    script.src = src;\r\n    (document.querySelector('head') as any).appendChild(script);\r\n\r\n    return new Promise((resolve) => {\r\n        script.onload = () => {\r\n            resolve();\r\n        };\r\n    });\r\n  }\r\n\r\ntype Props = {\r\n    apiKey:string,\r\n    defaultLocation:{lat:number,lng:number};\r\n    onChange?(lat:number,lng:number):void;\r\n    style?:any;\r\n    className?:string;\r\n}\r\n\r\nfunction isValidLocation(lat:number, lng:number){\r\n    return Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\r\n}\r\n\r\nconst MAP_VIEW_ID = 'google-map-view-' + Math.random().toString(36).substr(2, 9);\r\n\r\nconst MapPicker:FC<Props> = ({apiKey, defaultLocation, onChange, style,className}) => {\r\n    \r\n    const loaded = React.useRef(false);\r\n    let marker = React.useRef<any>(null);\r\n\r\n    function handleChangeLocation(){\r\n        if(onChange){\r\n            var currentLocation = marker.current.getPosition();\r\n            onChange(currentLocation.lat(), currentLocation.lng());\r\n        }\r\n    }\r\n\r\n    function loadMap(){\r\n        const Google = (window as any).google;\r\n\r\n        const map = new Google.maps.Map(document.getElementById(MAP_VIEW_ID), \r\n            { \r\n                center: isValidLocation(defaultLocation.lat, defaultLocation.lng) ? defaultLocation : { lat: 0, lng: 0},\r\n                zoom: 5 \r\n            });\r\n\r\n            Google.maps.event.addListener(map, 'click', function(event:any) {                \r\n                var clickedLocation = event.latLng;\r\n                if(!marker.current){\r\n                    marker.current = new Google.maps.Marker({\r\n                        position: clickedLocation,\r\n                        map: map,\r\n                        draggable: true\r\n                    });\r\n                    Google.maps.event.addListener(marker.current, 'dragend', handleChangeLocation);\r\n                } else {\r\n                    marker.current.setPosition(clickedLocation);\r\n                }\r\n\r\n                handleChangeLocation();\r\n            });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!loaded.current) {\r\n            loadScript(\r\n                'https://maps.googleapis.com/maps/api/js?libraries=places&key=' + apiKey,\r\n                'google-maps',\r\n              )\r\n              .then(loadMap);\r\n            loaded.current = true;\r\n        }\r\n\r\n    },[])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const componentStyle = Object.assign({width: '100%', height:'600px'}, style || {});\r\n\r\n   return (\r\n    <div id={MAP_VIEW_ID} style={componentStyle} className={className}></div>\r\n   );\r\n};\r\nexport default MapPicker;","import React, { useState } from 'react'\r\n\r\nimport MapPicker from 'react-google-map-picker'\r\n\r\nconst App = () => {\r\n  const [lat, setLat] = useState(10);\r\n  const [lng, setLng] = useState(20);\r\n\r\n  function handleChangeLocation (lat, lng){\r\n    setLat(lat);\r\n    setLng(lng);\r\n  }\r\n\r\n  return (\r\n    <>\r\n  <label>Latitute:</label><input type='text' value={lat} disabled/>\r\n  <label>Longitute:</label><input type='text' value={lng} disabled/>\r\n  <MapPicker defaultLocation={{lat: lat, lng: lng}} \r\n    style={{height:'700px'}}\r\n    onChange={handleChangeLocation} \r\n    apiKey='AIzaSyD07E1VvpsN_0FvsmKAj4nK9GnLq-9jtj8'/>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}