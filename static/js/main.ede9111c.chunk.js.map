{"version":3,"sources":["../../src/MapPicker.tsx","App.js","index.js"],"names":["MAP_VIEW_ID","Math","apiKey","defaultLocation","zoom","onChangeLocation","onChangeZoom","style","className","map","React","marker","currentLocation","location","Google","window","validLocation","isValidLocation","lat","lng","document","center","position","draggable","clickedLocation","event","handleChangeLocation","src","script","Promise","resolve","loadScript","componentStyle","Object","width","height","id","DefaultLocation","App","useState","setDefaultLocation","setLocation","setZoom","onClick","type","value","disabled","newZoom","ReactDOM","render","getElementById"],"mappings":"uNAmCA,IACMA,EAAc,mBAAqBC,oCAAzC,G,EAE4B,SAAC,G,IAACC,WAAQC,oB,IAAiBC,gBAAOA,EAAA,IAAGC,qBAAkBC,iBAAcC,UAAMC,cAE7FC,EAAMC,WAAZ,MACMC,EAASD,WAAf,MAEA,aACI,KAAoB,CAChB,IAAME,EAAkBD,UAAxB,cACAN,EAAiBO,EAAD,MAAwBA,EAAxCP,QAIR,aACIC,GAAgBA,EAAaG,UAA7BH,WAGJ,aACI,IAxBiBO,EAwBXC,EAAUC,OAAhB,OACMC,GAzBWH,EAyBKI,IAxBPhB,SAASY,EAATZ,MAAZY,IAA4CZ,SAASY,EAATZ,MAAnD,IAwB0BgB,EAAqD,CAAEC,IAAF,EAAUC,IAAK,GAE1FV,UAAc,IAAIK,OAAJ,IAAoBM,wBAApB,GACV,CACIC,OADJ,EAEIjB,KAAMA,IAGVO,EAAJ,QAQIA,0BAPAA,UAAiB,IAAIG,OAAJ,OAAuB,CACpCQ,SADoC,EAEpCb,IAAKA,EAF+B,QAGpCc,WAAW,IAEfT,yBAA8BH,EAA9BG,sBAKJL,+BAAiC,YAC7B,IAAMe,EAAkBC,EAAxB,OAEAd,yBACAe,OAGJjB,wCAGJC,eAAgB,YAnFpB,SAAoBiB,EAApB,GACI,IAAMC,EAASR,uBAAf,UAMA,OALAQ,2BACAA,uBACAA,QACCR,8CAEM,IAAIS,SAAQ,YACfD,SAAgB,WACZE,SA2EJC,CAnDR,gEAmDkB,EAAVA,yBADJrB,IAIAA,eAAgB,WACRC,EAAJ,UACIF,uBACAE,4BAEN,CALFD,IAOAA,eAAgB,WACRD,EAAJ,SACIA,uBAEN,CAJFC,IAMA,IAAMsB,EAAiBC,OAAA,OAAc,CAACC,MAAD,OAAgBC,OAAO,SAAU5B,GAAtE,IAED,OACC,yBAAK6B,GAAIpC,EAAaO,MAAOyB,EAAgBxB,UAAWA,KCrGtD6B,EAAkB,CAAEnB,IAAK,GAAIC,IAAK,KAyCzBmB,EAtCH,WAAO,IAAD,EAE8BC,mBAASF,GAFvC,mBAETlC,EAFS,KAEQqC,EAFR,OAIgBD,mBAASpC,GAJzB,mBAITU,EAJS,KAIC4B,EAJD,OAKQF,mBAPN,IAEF,mBAKTnC,EALS,KAKHsC,EALG,KAqBhB,OACE,oCACF,4BAAQC,QARR,WACEH,EAAmB,eAAMH,IACzBI,EAAY,eAAMJ,IAClBK,EApBgB,MAyBlB,kBACA,4CAAwB,2BAAOE,KAAK,OAAOC,MAAOhC,EAASK,IAAK4B,UAAQ,IACxE,6CAAyB,2BAAOF,KAAK,OAAOC,MAAOhC,EAASM,IAAK2B,UAAQ,IACzE,wCAAoB,2BAAOF,KAAK,OAAOC,MAAOzC,EAAM0C,UAAQ,IAE5D,kBAAC,EAAD,CAAW3C,gBAAiBA,EAC1BC,KAAMA,EACNG,MAAO,CAAC4B,OAAO,SACf9B,iBAxBF,SAA+Ba,EAAKC,GAClCsB,EAAY,CAACvB,IAAIA,EAAKC,IAAIA,KAwB1Bb,aArBF,SAA2ByC,GACzBL,EAAQK,IAqBR7C,OAAO,8CClCX8C,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,U","file":"static/js/main.ede9111c.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nfunction loadScript(src:string, id:string) {\n    const script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('id', id);\n    script.src = src;\n    (document.querySelector('head') as any).appendChild(script);\n\n    return new Promise((resolve) => {\n        script.onload = () => {\n            resolve();\n        };\n    });\n  }\n\ntype Location = {\nlat:number,\nlng:number\n}\n  \ntype Props = {\n    apiKey:string,\n    defaultLocation:Location;\n    zoom?:number;\n    onChangeLocation?(lat:number,lng:number):void;\n    onChangeZoom?(zoom:number):void;\n    style?:any;\n    className?:string;\n}\n\nfunction isValidLocation(location:Location){\n    return location && Math.abs(location.lat) <= 90 && Math.abs(location.lng) <= 180;\n}\n\nconst GOOGLE_SCRIPT_URL = 'https://maps.googleapis.com/maps/api/js?libraries=places&key=';\nconst MAP_VIEW_ID = 'google-map-view-' + Math.random().toString(36).substr(2, 9);\n\nconst MapPicker:FC<Props> = ({apiKey, defaultLocation, zoom = 7, onChangeLocation, onChangeZoom, style,className}) => {\n    \n    const map = React.useRef<any>(null);\n    const marker = React.useRef<any>(null);\n\n    function handleChangeLocation(){\n        if(onChangeLocation){\n            const currentLocation = marker.current.getPosition();\n            onChangeLocation(currentLocation.lat(), currentLocation.lng());\n        }\n    }\n\n    function handleChangeZoom(){\n        onChangeZoom && onChangeZoom(map.current.getZoom());\n    }\n\n    function loadMap(){\n        const Google = (window as any).google;\n        const validLocation = isValidLocation(defaultLocation) ? defaultLocation : { lat: 0, lng: 0};\n\n        map.current = new Google.maps.Map(document.getElementById(MAP_VIEW_ID), \n            { \n                center: validLocation,\n                zoom: zoom\n            });\n\n        if(!marker.current){\n            marker.current = new Google.maps.Marker({\n                position: validLocation,\n                map: map.current,\n                draggable: true\n            });\n            Google.maps.event.addListener(marker.current, 'dragend', handleChangeLocation);\n        } else {\n            marker.current.setPosition(validLocation);\n        }\n\n        map.current.addListener('click', function(event:any) {                \n            const clickedLocation = event.latLng;\n            \n            marker.current.setPosition(clickedLocation);\n            handleChangeLocation();\n        });\n\n        map.current.addListener('zoom_changed', handleChangeZoom);\n    }\n\n    React.useEffect(() => {\n        loadScript(GOOGLE_SCRIPT_URL + apiKey,'google-maps').then(loadMap);\n    },[])  // eslint-disable-line react-hooks/exhaustive-deps\n\n    React.useEffect(() => {\n        if (marker.current) {\n            map.current.setCenter(defaultLocation);\n            marker.current.setPosition(defaultLocation);\n        }\n    },[defaultLocation]);\n\n    React.useEffect(() => {\n        if (map.current) {\n            map.current.setZoom(zoom);\n        }\n    },[zoom]);\n\n    const componentStyle = Object.assign({width: '100%', height:'600px'}, style || {});\n\n   return (\n    <div id={MAP_VIEW_ID} style={componentStyle} className={className}></div>\n   );\n};\nexport default MapPicker;","import React, { useState } from 'react'\n\nimport MapPicker from 'react-google-map-picker'\n\nconst DefaultLocation = { lat: 10, lng: 106};\nconst DefaultZoom = 10;\n\nconst App = () => {\n\n  const [defaultLocation, setDefaultLocation] = useState(DefaultLocation);\n\n  const [location, setLocation] = useState(defaultLocation);\n  const [zoom, setZoom] = useState(DefaultZoom);\n\n  function handleChangeLocation (lat, lng){\n    setLocation({lat:lat, lng:lng});\n  }\n  \n  function handleChangeZoom (newZoom){\n    setZoom(newZoom);\n  }\n\n  function handleResetLocation(){\n    setDefaultLocation({ ... DefaultLocation});\n    setLocation({ ... DefaultLocation});\n    setZoom(DefaultZoom);\n  }\n\n  return (\n    <>\n  <button onClick={handleResetLocation}>Reset Location</button>\n  <label>Latitute:</label><input type='text' value={location.lat} disabled/>\n  <label>Longitute:</label><input type='text' value={location.lng} disabled/>\n  <label>Zoom:</label><input type='text' value={zoom} disabled/>\n\n  <MapPicker defaultLocation={defaultLocation}\n    zoom={zoom}\n    style={{height:'700px'}}\n    onChangeLocation={handleChangeLocation} \n    onChangeZoom={handleChangeZoom}\n    apiKey='AIzaSyD07E1VvpsN_0FvsmKAj4nK9GnLq-9jtj8'/>\n  </>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}