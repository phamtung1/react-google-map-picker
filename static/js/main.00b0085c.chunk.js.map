{"version":3,"sources":["../../src/MapPicker.tsx","App.js","index.js"],"names":["loadScript","src","id","scripts","document","i","isGoogleMapScriptLoaded","Promise","script","resolve","MAP_VIEW_ID","Math","apiKey","defaultLocation","zoom","onChangeLocation","onChangeZoom","style","className","map","React","marker","currentLocation","location","Google","window","validLocation","isValidLocation","lat","lng","center","position","draggable","event","clickedLocation","handleChangeLocation","componentStyle","Object","width","height","DefaultLocation","App","useState","setDefaultLocation","setLocation","setZoom","onClick","type","value","disabled","newZoom","ReactDOM","render","getElementById"],"mappings":"gOAaA,SAASA,EAAWC,EAApB,GACI,GAZJ,SAAiCC,GAE7B,IADA,IAAMC,EAA+CC,mCAArD,UACSC,EAAT,EAAwBA,EAAIF,EAA5B,OAA4CE,IACxC,GAAIF,0BAAJ,EACI,SAIR,SAIIG,CAAJ,GACI,OAAOC,QAAP,UAEJ,IAAMC,EAASJ,uBAAf,UAMA,OALAI,2BACAA,uBACAA,QACCJ,8CAEM,IAAIG,SAAQ,YACfC,SAAgB,WACZC,QAwBZ,IACMC,EAAc,mBAAqBC,oCAAzC,G,EAE6B,SAAC,G,IAAEC,WAAQC,oB,IAAiBC,gBAAOA,EAAA,IAAGC,qBAAkBC,iBAAcC,UAAOC,cAEhGC,EAAMC,WAAZ,MACMC,EAASD,WAAf,MAEA,aACI,KAAsB,CAClB,IAAME,EAAkBD,UAAxB,cACAN,EAAiBO,EAAD,MAAwBA,EAAxCP,QAIR,aACIC,GAAgBA,EAAaG,UAA7BH,WAGJ,aACI,IAxBiBO,EAwBXC,EAAUC,OAAhB,OACMC,GAzBWH,EAyBKI,IAxBPhB,SAASY,EAATZ,MAAZY,IAA4CZ,SAASY,EAATZ,MAAnD,IAwB0BgB,EAAqD,CAAEC,IAAF,EAAUC,IAAK,GAE1FV,UAAc,IAAIK,OAAJ,IAAoBpB,wBAApB,GACV,CACI0B,OADJ,EAEIhB,KAAMA,IAGTO,EAAL,QAQIA,0BAPAA,UAAiB,IAAIG,OAAJ,OAAuB,CACpCO,SADoC,EAEpCZ,IAAKA,EAF+B,QAGpCa,WAAW,IAEfR,yBAA8BH,EAA9BG,sBAKJL,+BAAiC,SAAUc,GACvC,IAAMC,EAAkBD,EAAxB,OAEAZ,yBACAc,OAGJhB,wCAGJC,eAAgB,WACZpB,EAnDR,gEAmDkB,EAAVA,yBADJoB,IAIAA,eAAgB,WACRC,EAAJ,UACIF,uBACAE,4BAEL,CALHD,IAOAA,eAAgB,WACRD,EAAJ,SACIA,uBAEL,CAJHC,IAMA,IAAMgB,EAAiBC,OAAA,OAAc,CAAEC,MAAF,OAAiBC,OAAQ,SAAWtB,GAAzE,IAEA,OACI,yBAAKf,GAAIQ,EAAaO,MAAOmB,EAAgBlB,UAAWA,KCnH1DsB,EAAkB,CAAEZ,IAAK,GAAIC,IAAK,KAyCzBY,EAtCH,WAAO,IAAD,EAE8BC,mBAASF,GAFvC,mBAET3B,EAFS,KAEQ8B,EAFR,OAIgBD,mBAAS7B,GAJzB,mBAITU,EAJS,KAICqB,EAJD,OAKQF,mBAPN,IAEF,mBAKT5B,EALS,KAKH+B,EALG,KAqBhB,OACE,qCACF,wBAAQC,QARR,WACEH,EAAmB,eAAIH,IACvBI,EAAY,eAAIJ,IAChBK,EApBgB,KAyBlB,4BACA,8CAAwB,uBAAOE,KAAK,OAAOC,MAAOzB,EAASK,IAAKqB,UAAQ,IACxE,+CAAyB,uBAAOF,KAAK,OAAOC,MAAOzB,EAASM,IAAKoB,UAAQ,IACzE,0CAAoB,uBAAOF,KAAK,OAAOC,MAAOlC,EAAMmC,UAAQ,IAE5D,cAAC,EAAD,CAAWpC,gBAAiBA,EAC1BC,KAAMA,EACNG,MAAO,CAACsB,OAAO,SACfxB,iBAxBF,SAA+Ba,EAAKC,GAClCe,EAAY,CAAChB,IAAIA,EAAKC,IAAIA,KAwB1Bb,aArBF,SAA2BkC,GACzBL,EAAQK,IAqBRtC,OAAO,gDClCXuC,IAASC,OAAO,cAAC,EAAD,IAAShD,SAASiD,eAAe,U","file":"static/js/main.00b0085c.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\n\r\nfunction isGoogleMapScriptLoaded(id: string): boolean {\r\n    const scripts: HTMLCollectionOf<HTMLScriptElement> = document.head.getElementsByTagName('script');\r\n    for (let i: number = 0; i < scripts.length; i++) {\r\n        if (scripts[i].getAttribute('id') === id) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction loadScript(src: string, id: string) {\r\n    if (isGoogleMapScriptLoaded(id)) {\r\n        return Promise.resolve();\r\n    }\r\n    const script = document.createElement('script');\r\n    script.setAttribute('async', '');\r\n    script.setAttribute('id', id);\r\n    script.src = src;\r\n    (document.querySelector('head') as any).appendChild(script);\r\n\r\n    return new Promise((resolve) => {\r\n        script.onload = () => {\r\n            resolve();\r\n        };\r\n    });\r\n}\r\n\r\ntype Location = {\r\n    lat: number,\r\n    lng: number\r\n}\r\n\r\ntype Props = {\r\n    apiKey: string,\r\n    defaultLocation: Location;\r\n    zoom?: number;\r\n    onChangeLocation?(lat: number, lng: number): void;\r\n    onChangeZoom?(zoom: number): void;\r\n    style?: any;\r\n    className?: string;\r\n}\r\n\r\nfunction isValidLocation(location: Location) {\r\n    return location && Math.abs(location.lat) <= 90 && Math.abs(location.lng) <= 180;\r\n}\r\n\r\nconst GOOGLE_SCRIPT_URL = 'https://maps.googleapis.com/maps/api/js?libraries=places&key=';\r\nconst MAP_VIEW_ID = 'google-map-view-' + Math.random().toString(36).substr(2, 9);\r\n\r\nconst MapPicker: FC<Props> = ({ apiKey, defaultLocation, zoom = 7, onChangeLocation, onChangeZoom, style, className }) => {\r\n\r\n    const map = React.useRef<any>(null);\r\n    const marker = React.useRef<any>(null);\r\n\r\n    function handleChangeLocation() {\r\n        if (onChangeLocation) {\r\n            const currentLocation = marker.current.getPosition();\r\n            onChangeLocation(currentLocation.lat(), currentLocation.lng());\r\n        }\r\n    }\r\n\r\n    function handleChangeZoom() {\r\n        onChangeZoom && onChangeZoom(map.current.getZoom());\r\n    }\r\n\r\n    function loadMap() {\r\n        const Google = (window as any).google;\r\n        const validLocation = isValidLocation(defaultLocation) ? defaultLocation : { lat: 0, lng: 0 };\r\n\r\n        map.current = new Google.maps.Map(document.getElementById(MAP_VIEW_ID),\r\n            {\r\n                center: validLocation,\r\n                zoom: zoom\r\n            });\r\n\r\n        if (!marker.current) {\r\n            marker.current = new Google.maps.Marker({\r\n                position: validLocation,\r\n                map: map.current,\r\n                draggable: true\r\n            });\r\n            Google.maps.event.addListener(marker.current, 'dragend', handleChangeLocation);\r\n        } else {\r\n            marker.current.setPosition(validLocation);\r\n        }\r\n\r\n        map.current.addListener('click', function (event: any) {\r\n            const clickedLocation = event.latLng;\r\n\r\n            marker.current.setPosition(clickedLocation);\r\n            handleChangeLocation();\r\n        });\r\n\r\n        map.current.addListener('zoom_changed', handleChangeZoom);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loadScript(GOOGLE_SCRIPT_URL + apiKey, 'google-maps').then(loadMap);\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    React.useEffect(() => {\r\n        if (marker.current) {\r\n            map.current.setCenter(defaultLocation);\r\n            marker.current.setPosition(defaultLocation);\r\n        }\r\n    }, [defaultLocation]);\r\n\r\n    React.useEffect(() => {\r\n        if (map.current) {\r\n            map.current.setZoom(zoom);\r\n        }\r\n    }, [zoom]);\r\n\r\n    const componentStyle = Object.assign({ width: '100%', height: '600px' }, style || {});\r\n\r\n    return (\r\n        <div id={MAP_VIEW_ID} style={componentStyle} className={className}></div>\r\n    );\r\n};\r\nexport default MapPicker;","import React, { useState } from 'react'\r\n\r\nimport MapPicker from 'react-google-map-picker'\r\n\r\nconst DefaultLocation = { lat: 10, lng: 106};\r\nconst DefaultZoom = 10;\r\n\r\nconst App = () => {\r\n\r\n  const [defaultLocation, setDefaultLocation] = useState(DefaultLocation);\r\n\r\n  const [location, setLocation] = useState(defaultLocation);\r\n  const [zoom, setZoom] = useState(DefaultZoom);\r\n\r\n  function handleChangeLocation (lat, lng){\r\n    setLocation({lat:lat, lng:lng});\r\n  }\r\n  \r\n  function handleChangeZoom (newZoom){\r\n    setZoom(newZoom);\r\n  }\r\n\r\n  function handleResetLocation(){\r\n    setDefaultLocation({...DefaultLocation});\r\n    setLocation({...DefaultLocation});\r\n    setZoom(DefaultZoom);\r\n  }\r\n\r\n  return (\r\n    <>\r\n  <button onClick={handleResetLocation}>Reset Location</button>\r\n  <label>Latitute:</label><input type='text' value={location.lat} disabled/>\r\n  <label>Longitute:</label><input type='text' value={location.lng} disabled/>\r\n  <label>Zoom:</label><input type='text' value={zoom} disabled/>\r\n\r\n  <MapPicker defaultLocation={defaultLocation}\r\n    zoom={zoom}\r\n    style={{height:'700px'}}\r\n    onChangeLocation={handleChangeLocation} \r\n    onChangeZoom={handleChangeZoom}\r\n    apiKey='AIzaSyD07E1VvpsN_0FvsmKAj4nK9GnLq-9jtj8'/>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}